//1 Create a collection named orders.
db.createCollection("orders")


//2 Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.
orders.insert({orderDate: new Date("August 29, 2016"), orderTotal: "$120",
lineItems: [{unitPrice: "$60"}, {quantity: 2}, {productName: "magnatiles"}]})

orders.insert({orderDate: new Date("August 17, 2016"), orderTotal: "$60",
lineItems: [{unitPrice: "$30"}, {quantity: 2}, {productName: "lunch box"}]})

orders.insert({orderDate: new Date("August 1, 2016"), orderTotal: "$60",
lineItems: [{unitPrice: "$60"}, {quantity: 1}, {productName: "dress"}]})

//3 Find a single order document, any order document.

orders.findOne()

//4 Find all orders and make them look pretty.

orders.findOne().pretty();

//5 Find all orders with an orderDate that is prior to 1/1/2016.

> orders.find({orderDate: {$lt: new Date("2016-01-01")}});


//6 Find all orders with an orderDate that is after 1/1/2016.

> orders.find({orderDate: {$gt: new Date("2016-01-01")}});


//7 Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.

orders.find({ "quantity": { "$gte": 1, "$lte": 50 } })

//8 Update one of your line items to 42.99. HINT: Look at dot notation

orders.update({"lineItems.1":{$exists: true}}, {$rename: {"unitPrice": "42.99"}})


//9 Remove one of your orders.

orders.remove({"productName": "lunch boxes"});
